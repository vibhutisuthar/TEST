using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using MTP_JAPA.Helpers;
using NLog;
using NLog.Config;
using System.Xml;
using MTP.DTO;
using MTP.BAL;
using System.Text;
using System.Web.UI;
using System.IO;

namespace MTP_JAPA.Controllers
{
    public class UserController : BaseController
    {

        #region Variables

        string strBookingReference = "Booking Reference";
        string strInvoiceNumber = "Invoice Number";
        string strTicketNumber = "Ticket Number";

        #endregion

        #region Load

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ActionResult Index()
        {
            Session["RLOC"] = null;
            Session["Surname"] = null;
            Session["GDS"] = null;
            Session["InvoiceNumber"] = null;
            Session["QiLiveItineraryData"] = null;
            Session["LoginEmailAddress"] = null;
            ViewBag.theHiddenTabIndex = 0;
            ViewBag.TabDisplay = 1;
            return View();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="formCollection"></param>
        /// <returns></returns>
        public ActionResult EmailLogin()
        {
            ViewBag.theHiddenTabIndex = 1;
            //ViewBag.form_footer_detail = 0;
            ViewBag.TabDisplay = 1;
            return View();
        }

        /// <summary>
        /// EmailLogin
        /// </summary>
        /// <param name="formCollection"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult EmailLogin(FormCollection formCollection)
        {

            string strEMailAddress = "";
            string strPassword = "";
            foreach (string key in formCollection.Keys)
            {
                if (key == "email")
                {
                    strEMailAddress = formCollection[key].Trim();
                }
                else if (key == "password")
                {
                    strPassword = formCollection[key].Trim();
                }
            }
            Session["LoginEmailAddress"] = null;
            if (strEMailAddress != "" && strPassword != "" && strEMailAddress.ToLower() != "email address")
            {
                UsersBAL objUserBAL = new UsersBAL();
                List<UsersModel> lstUsersModel = objUserBAL.FindUser(strEMailAddress, strPassword);
                if (lstUsersModel != null && lstUsersModel.Count > 0)
                {
                    Session["LoginEmailAddress"] = strEMailAddress;
                    return RedirectToAction("BookingList", "Bookings");
                }
                else
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 37 });
                }
            }
            else
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 2 });
            }
        }

        /// <summary>
        /// Register
        /// </summary>
        /// <returns></returns>
        public ActionResult Register()
        {
            ViewBag.theHiddenTabIndex = 1;
            //ViewBag.form_footer_detail = 0;
            ViewBag.TabDisplay = 1;
            return View();
        }

        /// <summary>
        /// Change Password
        /// </summary>
        /// <returns></returns>
        public ActionResult ChangePassword()
        {
            ViewBag.theHiddenTabIndex = 1;
            //ViewBag.form_footer_detail = 0;
            ViewBag.TabDisplay = 1;
            return View();
        }

        /// <summary>
        /// ChangePassword
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ChangePassword(FormCollection formCollection)
        {
            string emailAddress = "";
            if (Session["LoginEmailAddress"] != null)
            {
                emailAddress = Convert.ToString(Session["LoginEmailAddress"]);
            }
            else
            {
                return RedirectToAction("Index", "User");
            }

            UsersBAL objUserBAL = new UsersBAL();
            logger.Debug("Change Password");
            string currentpassword = "", password = "", confirmPassword = "";
            foreach (string key in formCollection.Keys)
            {
                if (key == "currentpassword")
                {
                    currentpassword = formCollection[key].Trim();
                }
                else if (key == "password")
                {
                    password = formCollection[key].Trim();
                }
                else if (key == "confirmpassword")
                {
                    confirmPassword = formCollection[key].Trim();
                }
            }

            logger.Debug("Validations check");
            if (string.IsNullOrEmpty(currentpassword) || string.IsNullOrEmpty(password) || string.IsNullOrEmpty(confirmPassword) || string.IsNullOrEmpty(emailAddress))
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 41 });
            }
            if (password.Length < 6)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 46 });
            }
            if (password != confirmPassword)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 36 });
            }

            logger.Debug("Call Change password Method");
            int retVal = ChangePasswordMethod(emailAddress, currentpassword, password);
            if (retVal == 1)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 45 });
            }
            else
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 47 });
            }
        }

        /// <summary>
        /// Register
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult Register(FormCollection formCollection)
        {
            UsersBAL objUserBAL = new UsersBAL();
            logger.Debug("Register New User");
            string userName = "", emailAddress = "", password = "", confirmPassword = "";
            foreach (string key in formCollection.Keys)
            {
                if (key == "username")
                {
                    userName = formCollection[key].Trim();
                }
                else if (key == "email")
                {
                    emailAddress = formCollection[key].Trim();
                }
                else if (key == "password")
                {
                    password = formCollection[key].Trim();
                }
                else if (key == "confirmpassword")
                {
                    confirmPassword = formCollection[key].Trim();
                }
            }

            logger.Debug("Validations check");
            if (string.IsNullOrEmpty(emailAddress) || string.IsNullOrEmpty(password) || string.IsNullOrEmpty(confirmPassword))
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 41 });
            }

            if (password.Length < 6)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 46 });
            }

            if (Common.ValidateEmailAddress(emailAddress) == false)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 40 });
            }

            if (password != confirmPassword)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 36 });
            }

            logger.Debug("check user already exist or not");
            int retValue = UserAlreadyExist(emailAddress);
            if (retValue == 1)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 42 });
            }
            else if (retValue == 2)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 43 });
            }

            logger.Debug("If user not already exist then register new user");
            if (retValue == 0)
            {
                int NewUserRegistered = RegisterNewUser(emailAddress, password);
                if (NewUserRegistered == 1)
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 39 });
                }
                else
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 43 });
                }
            }
            return View();
        }

        /// <summary>
        /// ReNewPassword
        /// </summary>
        /// <returns></returns>
        public ActionResult ReNewPassword()
        {
            ViewBag.theHiddenTabIndex = 1;
            //ViewBag.form_footer_detail = 0;
            ViewBag.TabDisplay = 1;
            return View();
        }

        /// <summary>
        /// ReNewPassword
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ReNewPassword(FormCollection formCollection)
        {
            try
            {
                string email = "";
                foreach (string key in formCollection.Keys)
                {
                    if (key == "email")
                    {
                        email = formCollection[key].Trim();
                    }
                }

                if (Common.ValidateEmailAddress(email) == false)
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 40 });
                }

                if (!string.IsNullOrEmpty(email))
                {
                    bool retValue = SendMailForRenewPassword(email);

                    //Send an email (to the email address entered by the submitter).
                    //bool retValue = SendEmail(Common.MailType.RequestResetPassword, email);

                    if (retValue == true)
                    {
                        return RedirectToAction("Error", "ErrorDisplay", new { E = 38 });
                    }
                    else
                    {
                        return RedirectToAction("Error", "ErrorDisplay", new { E = 2 });
                    }
                }
                else
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 41 });
                }
            }
            catch
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 3 });
            }

        }

        /// <summary>
        /// RegistrationConfirmation
        /// </summary>
        /// <returns></returns>
        public ActionResult RegistrationConfirmation()
        {
            ViewBag.theHiddenTabIndex = 1;
            ViewBag.TabDisplay = 1;

            //1) First Decrypt QueryString
            //2) Update user Status to confirmed
            //UsersBAL objUsersBAL = new UsersBAL();
            ///objUsersBAL.UpdateUserStatus(1, "confirmed");
            return View();
        }

        /// <summary>
        /// ResetPasswordConfirmation
        /// </summary>
        /// <returns></returns>
        public ActionResult ResetPasswordConfirmation()
        {
            ViewBag.theHiddenTabIndex = 1;
            ViewBag.TabDisplay = 1;

            //1) First Decrypt QueryString

            //2) Update password and send ResetPassword mail
            //string strOldPassword = "";
            //UsersBAL objUsersBAL = new UsersBAL();
            //List<UsersModel> lstUsersModel = objUsersBAL.GetPasswordByEmail(strEmailAddress);
            //if (lstUsersModel != null && lstUsersModel.Count > 0)
            //{
            //    strSendEmailTo = strEmailAddress;
            //    foreach (UsersModel obj in lstUsersModel)
            //    {
            //        strOldPassword = obj.Password;
            //        string strNewPassowrod = Common.RandomString(5, true);
            //        strBody = "<html><body> Dear Traveller, <br /><br /> Here are your login details <br /> Email id: " + obj.EmailAddress + "<br /> New Password: " + strNewPassowrod + " <br /><br /> Please login with this new password and change password of your choice. <br /><br /> Regards,<br /> TravelBytes </body></html>";
            //        obj.Password = strNewPassowrod;
            //        successfullyUpdated = objUsersBAL.SaveUser(obj);
            //    }
            //}
            //else
            //{
            //    return false;
            //}

            //if (successfullyUpdated == 1 && !string.IsNullOrEmpty(strSendEmailTo))
            //{
            //    bMailSent=SendEmail(Common.MailType.ResetPassword, "");
            //}
            //if (bMailSent == false)
            //{
            //    List<UsersModel> lstUsersModelRevert = objUsersBAL.GetPasswordByEmail(strEmailAddress);
            //    if (lstUsersModelRevert != null && lstUsersModelRevert.Count > 0)
            //    {
            //        foreach (UsersModel objRevert in lstUsersModelRevert)
            //        {
            //            objRevert.Password = strOldPassword;
            //            successfullyUpdated = objUsersBAL.SaveUser(objRevert);
            //        }
            //    }
            //}

            return View();
        }

        #endregion

        #region Events

        [HttpPost]
        [ValidateInput(false)]
        public ActionResult Index(FormCollection formCollection, string radioValue)
        {
            ViewBag.theGoClick = 0;
            Session["theGoClick"] = 0;

            string strValue = "";
            string strSearchOn = "";
            foreach (string key in formCollection.Keys)
            {
                if (key == "surname")
                {
                    m_Surname = formCollection[key].Trim();

                }
                else if (key == "reference_number")
                {
                    strValue = formCollection[key].Trim();

                }
                else if (key == "country")
                {
                    m_GDS = formCollection[key];
                }
            }
            if (m_Surname == "" || m_Surname.ToLower() == "surname" || strValue == "" || m_GDS == "" || strValue == strBookingReference || strValue == strInvoiceNumber || strValue == strTicketNumber)
            {
                return RedirectToAction("Error", "ErrorDisplay", new { E = 20 });
            }

            if (radioValue == strBookingReference) //Booking reference search
            {
                strSearchOn = Common.RetrieveType.BookingReference;
                m_RLOC = strValue;

                int ReturnValue = DoGo(strSearchOn);
                if (ReturnValue == 1)
                {
                    //return RedirectToAction("ItineraryView", "Itinerary");
                }
                if (ReturnValue == 2)
                {
                    //return RedirectToAction("ItineraryView", "Itinerary");
                }
                if (ReturnValue == 3)
                {
                    return RedirectToAction("ItineraryView", "Itinerary", new { R = m_RLOC, S = Server.UrlEncode(m_Surname), G = m_GDS });
                }
                if (ReturnValue == 0)
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 2 });
                }
            }
            else if (radioValue == strInvoiceNumber) //Invoice number search
            {
                strSearchOn = Common.RetrieveType.InvoiceNumber;
                m_InvoiceNumber = strValue;

                int ReturnValueInvoice = 0;
                ReturnValueInvoice = DoGoInvoice(strSearchOn);  //Under Development
                if (ReturnValueInvoice == 0)
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 2 });
                    //return RedirectToAction("Error", "ErrorDisplay", new { E = 100 });
                }
                if (ReturnValueInvoice == 1)
                {
                    //return RedirectToAction("Error", "ErrorDisplay", new { E = 100 });
                    return RedirectToAction("InvoiceView", "Invoice", new { I = m_InvoiceNumber }); //Under Development
                }
            }
            else if (radioValue == strTicketNumber) //TIcket number search
            {
                strSearchOn = Common.RetrieveType.TicketNumber;
                m_EticketNumber = strValue;

                int ReturnValueTicket = DoGoTicket(strSearchOn);
                if (ReturnValueTicket == 0)
                {
                    return RedirectToAction("Error", "ErrorDisplay", new { E = 23 });
                }
                else if (ReturnValueTicket == 1)
                {
                    return RedirectToAction("EticketView", "Eticket", new { T = "T", ET = m_InvoiceNumber });
                }
            }
            return View();
        }


        #endregion

        #region Helper Methods

        /// <summary>
        /// ChangePassword
        /// </summary>
        /// <param name="strEmailAddress"></param>
        /// <param name="strOldPassword"></param>
        /// <param name="strNewPassword"></param>
        /// <returns></returns>
        public int ChangePasswordMethod(string strEmailAddress, string strOldPassword, string strNewPassword)
        {
            UsersBAL objUsersBAL = new UsersBAL();
            int successfullyUpdated = 0;
            try
            {
                List<UsersModel> lstUsersModel = objUsersBAL.GetPasswordByEmail(strEmailAddress);
                if (lstUsersModel != null && lstUsersModel.Count > 0)
                {
                    foreach (UsersModel obj in lstUsersModel)
                    {
                        if (obj.Password == strOldPassword)
                        {
                            obj.Password = strNewPassword;
                            successfullyUpdated = objUsersBAL.SaveUser(obj);
                            if (successfullyUpdated == 1)
                            {
                                return 1;
                            }
                        }
                        else
                        {
                            return 0; // Either email address not registered or old password is incorrect.  
                            //  return RedirectToAction("Error", "ErrorDisplay", new { E = 44 });
                        }
                    }
                }
                else
                {
                    return 0; // Either email address not registered or old password is incorrect.
                    //  return RedirectToAction("Error", "ErrorDisplay", new { E = 44 });
                }
                return 0;
            }
            catch (Exception)
            {
                return 2;
            }
            finally
            {
                objUsersBAL = null;
            }
        }

        /// <summary>
        /// UserAlreadyExist
        /// </summary>
        /// <param name="strEmailAddress"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public int UserAlreadyExist(string strEmailAddress)
        {
            UsersBAL objUser = new UsersBAL();
            try
            {
                List<UsersModel> lstUsersModel = objUser.GetPasswordByEmail(strEmailAddress);
                if (lstUsersModel != null && lstUsersModel.Count > 0)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }
            catch
            {
                return 2;
            }
            finally
            {
                objUser = null;
            }
        }

        /// <summary>
        /// RegisterNewUser
        /// </summary>
        /// <param name="strEmailAddress"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public int RegisterNewUser(string strEmailAddress, string password)
        {
            UsersBAL objUser = new UsersBAL();
            try
            {
                UsersModel objUsersModel = new UsersModel();
                objUsersModel.EmailAddress = strEmailAddress;
                objUsersModel.Password = password;
                objUsersModel.ID = 0;
                objUsersModel.Status = "pending";

                int intNewUserRegistered = objUser.RegisterNewUSer(objUsersModel);
                //Send E-mail
                //SendEmail(Common.MailType.ConfirmRegistration, strEmailAddress);
                return intNewUserRegistered;
            }
            catch
            {
                return 2;
            }
            finally
            {
                objUser = null;
            }
        }

        /// <summary>
        /// RegisterNewUser
        /// </summary>
        /// <param name="strEmailAddress"></param>
        /// <param name="password"></param>
        /// <returns></returns>
        public int UpdateUserStatus(Int64 UsersID, string strStatus)
        {
            UsersBAL objUser = new UsersBAL();
            try
            {
                int iUpdateSuccessfully = objUser.UpdateUserStatus(UsersID, strStatus);
                return iUpdateSuccessfully;
            }
            catch
            {
                return 2;
            }
            finally
            {
                objUser = null;
            }
        }




        /// <summary>
        /// SendMailForRenewPassword
        /// </summary>
        /// <returns></returns>
        public bool SendMailForRenewPassword(string strEmailAddress)
        {
            string strSendEmailTo = "";//= System.Web.Configuration.WebConfigurationManager.AppSettings["EmailTo"];
            string strSendEmailFrom = System.Web.Configuration.WebConfigurationManager.AppSettings["EmailFrom"];
            string strEmailCC = System.Web.Configuration.WebConfigurationManager.AppSettings["EmailCC"];

            string strBody = "";
            bool IsBodyHTML = true;
            int successfullyUpdated = 0; //change it to 0
            bool bMailSent = false;
            string strOldPassword = "";

            UsersBAL objUsersBAL = new UsersBAL();
            List<UsersModel> lstUsersModel = objUsersBAL.GetPasswordByEmail(strEmailAddress);
            if (lstUsersModel != null && lstUsersModel.Count > 0)
            {
                strSendEmailTo = strEmailAddress;
                foreach (UsersModel obj in lstUsersModel)
                {
                    strOldPassword = obj.Password;
                    string strNewPassowrod = Common.RandomString(5, true);
                    strBody = "<html><body> Dear Traveller, <br /><br /> Here are your login details <br /> Email id: " + obj.EmailAddress + "<br /> New Password: " + strNewPassowrod + " <br /><br /> Please login with this new password and change password of your choice. <br /><br /> Regards,<br /> TravelBytes </body></html>";
                    obj.Password = strNewPassowrod;
                    successfullyUpdated = objUsersBAL.SaveUser(obj);
                }
            }
            else
            {
                return false;
            }
            if (successfullyUpdated == 1 && !string.IsNullOrEmpty(strSendEmailTo))
            {
                bMailSent = Common.SendEmail(strSendEmailFrom, strSendEmailTo, strEmailCC, "", "New Password for My Travel Plans", strBody, IsBodyHTML);
            }
            if (bMailSent == false)
            {
                List<UsersModel> lstUsersModelRevert = objUsersBAL.GetPasswordByEmail(strEmailAddress);
                if (lstUsersModelRevert != null && lstUsersModelRevert.Count > 0)
                {
                    foreach (UsersModel objRevert in lstUsersModelRevert)
                    {
                        objRevert.Password = strOldPassword;
                        successfullyUpdated = objUsersBAL.SaveUser(objRevert);
                    }
                }
            }
            return bMailSent;
        }

        /// <summary>
        /// MoveToSessionVars
        /// </summary>
        void MoveToSessionVars()
        {
            Session["RLOC"] = m_RLOC;
            Session["Surname"] = m_Surname;
            Session["GDS"] = m_GDS;
            Session["InvoiceNumber"] = m_InvoiceNumber;
        }

        /// <summary>
        /// DoGo
        /// </summary>
        /// <param name="objSender"></param>
        /// <param name="objArgs"></param>
        protected int DoGo(string strSearchOn)
        {
            Session["HTMLFileName"] = null;
            Session["Etickets"] = null;
            Session["Decoder"] = null;

            bool InvSummary = false;
            bool TKTSummary = false;

            if (strSearchOn == "INV")
                InvSummary = true;

            if (strSearchOn == "TKT")
                TKTSummary = true;

            if (m_RLOC.Length == 6 && m_Surname.Length > 0 && m_GDS.Length == 2)
            {
                this.MoveToSessionVars();
                string URL = "";

                // forward to Intinerary page
                if (InvSummary)
                {
                    //URL = "Invoice.aspx?T=V";
                }
                else if (TKTSummary)
                {
                    //URL = "Eticket.aspx?T=T";
                }
                else
                {
                    if (m_Type == "I")
                        return 1;
                    else if (m_Type == "V")
                        //URL = string.Format("Invoice.aspx?R={0}&S={1}&G={2}", Common.m_RLOC, Server.UrlEncode(Common.m_Surname), Common.m_GDS);
                        return 2;
                    else
                        return 3;
                }
            }
            return 0;
            //if (m_InvoiceNumber.Length > 0 && m_Surname.Length > 0)  //Need To work
            //    DoGoInvoice(objSender, objArgs);
            //// not all fields are correct
            //outError.InnerHtml = "Not all mandatory fields completed. Please correct and re-enter";

        }

        /// <summary>
        /// DoGoInvoice
        /// </summary>
        /// <param name="strSearchOn"></param>
        /// <returns></returns>
        protected int DoGoInvoice(string strSearchOn)
        {
            Session["HTMLFileName"] = null;
            Session["Etickets"] = null;

            if (m_InvoiceNumber != null)
            {
                if (m_InvoiceNumber.Substring(3, 1) == " ")
                {
                    // remove airline code
                    m_InvoiceNumber = m_InvoiceNumber.Replace(" ", "").Substring(3);
                }
                else
                    m_InvoiceNumber = m_InvoiceNumber.Replace(" ", "");

                this.MoveToSessionVars();
                return 1;
            }
            return 0;

            //string URL = "";
            // forward to Intinerary page
            //URL = string.Format("Invoice.aspx?I={0}", m_InvoiceNumber);
            //Response.Redirect(URL); //Need to work                        
            // not all fields are correct
            //   outError.InnerHtml = "Invoice number must have a numeric value and Surname is mandatory. Please correct and resend.";
        }

        /// <summary>
        /// DoGoTicket
        /// </summary>
        /// <param name="strSearchOn"></param>
        /// <returns></returns>
        protected int DoGoTicket(string strSearchOn)
        {
            Session["HTMLFileName"] = null;
            Session["Etickets"] = null;

            if (m_EticketNumber.Length > 0 && m_Surname.Length > 0)
            {
                m_InvoiceNumber = m_EticketNumber; //.Replace(" ", "");

                //if (m_InvoiceNumber.Length > 10) //Need To Work-Discussed With Phil
                //{
                //    // take the last 10 chars
                //    m_InvoiceNumber = m_InvoiceNumber.Substring(m_EticketNumber.Length - 10);
                //}

                this.MoveToSessionVars();
                return 1;

                //string URL = "";
                // forward to Intinerary page
                //URL = string.Format("Invoice.aspx?I={0}", m_InvoiceNumber);
                //URL = "Eticket.aspx?T=T&ET=" + m_InvoiceNumber;                
                //Response.Redirect(URL);
            }
            return 0;
        }

        /// <summary>
        /// SendEmail
        /// </summary>
        /// <param name="objMailType"></param>
        /// <param name="strEmailAddress"></param>
        /// <returns></returns>
        public bool SendEmail(Common.MailType objMailType, string strEmailAddress)
        {
            string strSendEmailTo = "";//= System.Web.Configuration.WebConfigurationManager.AppSettings["EmailTo"];
            string strSendEmailFrom = System.Web.Configuration.WebConfigurationManager.AppSettings["EmailFrom"];
            string strEmailCC = System.Web.Configuration.WebConfigurationManager.AppSettings["EmailCC"];

            string strBody = "";
            bool IsBodyHTML = true;
            bool bMailSent = false;

            switch (objMailType)
            {
                case Common.MailType.ConfirmRegistration:
                    strBody = Common.GetMailBody(Common.MailType.ConfirmRegistration); //need to set more parameters
                    bMailSent = Common.SendEmail(strSendEmailFrom, strSendEmailTo, strEmailCC, "", Common.GetMailSubject(Common.MailType.ConfirmRegistration), strBody, IsBodyHTML);
                    break;

                case Common.MailType.RequestResetPassword:
                    strBody = Common.GetMailBody(Common.MailType.RequestResetPassword); //need to set more parameters
                    bMailSent = Common.SendEmail(strSendEmailFrom, strSendEmailTo, strEmailCC, "", Common.GetMailSubject(Common.MailType.RequestResetPassword), strBody, IsBodyHTML);
                    break;

                case Common.MailType.ResetPassword:

                    strBody = Common.GetMailBody(Common.MailType.ResetPassword); //need to set more parameters
                    bMailSent = Common.SendEmail(strSendEmailFrom, strSendEmailTo, strEmailCC, "", Common.GetMailSubject(Common.MailType.ResetPassword), strBody, IsBodyHTML);
                    break;

                //if (strEmailAddress != "")
                //{
                //    string strOldPassword = "";
                //    UsersBAL objUsersBAL = new UsersBAL();
                //    List<UsersModel> lstUsersModel = objUsersBAL.GetPasswordByEmail(strEmailAddress);
                //    if (lstUsersModel != null && lstUsersModel.Count > 0)
                //    {
                //        strSendEmailTo = strEmailAddress;
                //        foreach (UsersModel obj in lstUsersModel)
                //        {
                //            strOldPassword = obj.Password;
                //            string strNewPassowrod = Common.RandomString(5, true);
                //            //strBody = "<html><body> Dear Traveller, <br /><br /> Here are your login details <br /> Email id: " + obj.EmailAddress + "<br /> New Password: " + strNewPassowrod + " <br /><br /> Please login with this new password and change password of your choice. <br /><br /> Regards,<br /> TravelBytes </body></html>";
                //            strBody = Common.GetMailBody(Common.MailType.ResetPassword); //need to set more parameters
                //            obj.Password = strNewPassowrod;
                //            successfullyUpdated = objUsersBAL.SaveUser(obj);
                //        }
                //    }
                //    else
                //    {
                //        return false;
                //    }
                //    if (successfullyUpdated == 1 && !string.IsNullOrEmpty(strSendEmailTo))
                //    {
                //        bMailSent = Common.SendEmail(strSendEmailFrom, strSendEmailTo, strEmailCC, "", Common.GetMailSubject(Common.MailType.ResetPassword), strBody, IsBodyHTML);
                //    }
                //    if (bMailSent == false)
                //    {
                //        List<UsersModel> lstUsersModelRevert = objUsersBAL.GetPasswordByEmail(strEmailAddress);
                //        if (lstUsersModelRevert != null && lstUsersModelRevert.Count > 0)
                //        {
                //            foreach (UsersModel objRevert in lstUsersModelRevert)
                //            {
                //                objRevert.Password = strOldPassword;
                //                successfullyUpdated = objUsersBAL.SaveUser(objRevert);
                //            }
                //        }
                //    }
                //}

                default:
                    break;
            }
            return bMailSent;
        }

        #endregion


        #region CAPTCHA

        public string GenerateCaptcha(this HtmlHelper helper)
        {

            var captchaControl = new Recaptcha.RecaptchaControl
                    {
                        ID = "recaptcha",
                        Theme = "blackglass",
                        PublicKey = "-- Put Public Key Here --",
                        PrivateKey = "-- Put Private Key Here --"
                    };

            var htmlWriter = new HtmlTextWriter(new StringWriter());

            captchaControl.RenderControl(htmlWriter);

            return htmlWriter.InnerWriter.ToString();
        }

        #endregion
    }
    public class CaptchaValidatorAttribute : ActionFilterAttribute
    {
        private const string CHALLENGE_FIELD_KEY = "recaptcha_challenge_field";
        private const string RESPONSE_FIELD_KEY = "recaptcha_response_field";

        public override void OnActionExecuting(ActionExecutingContext filterContext)  
            {  
                var captchaChallengeValue = filterContext.HttpContext.Request.Form[CHALLENGE_FIELD_KEY];  
                var captchaResponseValue = filterContext.HttpContext.Request.Form[RESPONSE_FIELD_KEY];  
                var captchaValidtor = new Recaptcha.RecaptchaValidator  
                                          {  
                                              PrivateKey = "-- PUT PRIVATE KEY HERE --",  
                                              RemoteIP = filterContext.HttpContext.Request.UserHostAddress,  
                                              Challenge = captchaChallengeValue,  
                                              Response = captchaResponseValue  
                                          };  
      
                var recaptchaResponse = captchaValidtor.Validate();  
      
            // this will push the result value into a parameter in our Action  
                filterContext.ActionParameters["captchaValid"] = recaptchaResponse.IsValid;  
      
                base.OnActionExecuting(filterContext);  
            }
    }
}
